name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Caching: root project
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-${{ matrix.node-version }}-
            yarn-${{ runner.os }}-

      - name: Use node_modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ matrix.node-version }}-
            node-modules-${{ runner.os }}-

      - name: Project installation
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile --non-interactive
        env:
          CI: true

      - name: Checks
        run: yarn run check

      - name: Set deployment url
        run: node ./scripts/deploy/surge-domains.js url DEPLOYMENT_URL >> $GITHUB_ENV
        env:
          PROD: ${{ github.ref == 'refs/heads/main' }}

      - name: Set deployment environment
        run: node ./scripts/deploy/surge-domains.js env DEPLOYMENT_ENV >> $GITHUB_ENV
        env:
          PROD: ${{ github.ref == 'refs/heads/main' }}

      - name: Create GitHub deployment
        if: env.DEPLOYMENT_URL
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: ${{ env.DEPLOYMENT_URL }}
          environment: ${{ env.DEPLOYMENT_ENV }}

      - name: Deployment (Staging)
        if: github.ref != 'refs/heads/main'
        run: yarn deploy
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Deployment (Production)
        if: github.ref == 'refs/heads/main'
        run: yarn deploy
        env:
          PROD: true
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Update GitHub deployment status
        if: always() && env.DEPLOYMENT_URL
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: ${{ env.DEPLOYMENT_URL }}
          state: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
